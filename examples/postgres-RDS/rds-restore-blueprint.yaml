apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: rds-postgres-bp
actions:
  backup:
    kind: StatefulSet
    outputArtifacts:
      cloudObject:
        keyValue:
          backupLocation: "{{ .Phases.pgDump.Output.backupLocation }}"
    phases:
    - func: KubeTask
      name: pgDump
      objects:
        pgSecret:
          kind: Secret
          name: '{{ index .Object.metadata.labels "app.kubernetes.io/instance" }}-postgresql'
          namespace: '{{ .StatefulSet.Namespace }}'
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.84.0
        namespace: '{{ .StatefulSet.Namespace }}'
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          export PGHOST='{{ index .Object.metadata.labels "app.kubernetes.io/instance" }}-postgresql.{{ .StatefulSet.Namespace }}.svc.cluster.local'
          export PGUSER='postgres'
          export PGPASSWORD='{{ index .Phases.pgDump.Secrets.pgSecret.Data "postgres-password" | toString }}'
          BACKUP_LOCATION=pg_backups/{{ .StatefulSet.Namespace }}/{{ .StatefulSet.Name }}/{{ toDate "2006-01-02T15:04:05.999999999Z07:00" .Time | date "2006-01-02T15:04:05Z07:00" }}/backup.sql.gz
          pg_dumpall --clean -U $PGUSER | gzip -c | kando location push --profile '{{ toJson .Profile }}' --path "${BACKUP_LOCATION}" -
          kando output backupLocation "${BACKUP_LOCATION}"
  restore:
    kind: StatefulSet
    inputArtifactNames:
    - cloudObject
    phases:
    - func: KubeTask
      name: pgRestore
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.84.0
        namespace: '{{ .StatefulSet.Namespace }}'
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          # Set the region
          export REGION="{{ .ConfigMaps.dbconfig.Data.region | toString }}"

          export INSTANCE_NAME="{{ .ConfigMaps.dbconfig.Data.instance_name | toString }}"

          # get the pod IP
          POD_IP=$(hostname -i)

          export accessKeyId="{{ .Secrets.dbsecret.Data.accessKeyId | toString }}"
          export secretAccessKey='{{ .Secrets.dbsecret.Data.secretAccessKey | toString }}'

          ####Configure AWS
          aws configure set aws_access_key_id $accessKeyId
          aws configure set aws_secret_access_key $secretAccessKey

          # Set the default region
          aws configure set default.region $REGION

          # Set the default output format
          aws configure set default.output json
          
          # SG creation
          SG_NAME=rds-security-group
          SG_DESC="rds-Security-group-from-Blueprint"

          # Create the security group in the default VPC
          SG_ID=$(aws ec2 create-security-group --group-name $SG_NAME --description $SG_DESC --output text --query "GroupId")

          aws ec2 authorize-security-group-ingress \
              --group-id $SG_ID \
              --protocol tcp \
              --port 5432 \
              --cidr 0.0.0.0/0

          export PGUSER="{{ .Secrets.dbsecret.Data.postgres_username | toString }}"
          export PGPASSWORD='{{ .Secrets.dbsecret.Data.postgres_password | toString }}'

          # Create the RDS instance
          aws rds create-db-instance \
              --db-instance-identifier $INSTANCE_NAME \
              --db-instance-class db.t3.micro \
              --engine postgres \
              --engine-version 14.1 \
              --master-username $PGUSER \
              --master-user-password $PGPASSWORD \
              --allocated-storage 20 \
              --vpc-security-group-ids $SG_ID \
              --region $REGION

          # Wait for the instance to be created
          aws rds wait db-instance-available \
              --db-instance-identifier $INSTANCE_NAME \
              --region $REGION

          ENDPOINT=$(aws rds describe-db-instances \
              --db-instance-identifier $INSTANCE_NAME \
              --region $REGION \
              --query "DBInstances[0].Endpoint.Address" \
              --output text)

          export PGHOST=$ENDPOINT
          BACKUP_LOCATION={{ .ArtifactsIn.cloudObject.KeyValue.backupLocation }}
          kando location pull --profile '{{ toJson .Profile }}' --path "${BACKUP_LOCATION}" - | gunzip -c -f | sed 's/LOCALE/LC_COLLATE/' | psql -q -U "${PGUSER}"         
  delete:
    inputArtifactNames:
      - cloudObject
    phases:
    - func: KubeTask
      name: deleteDump
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.84.0
        namespace: "{{ .Namespace.Name }}"
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            kando location delete --profile '{{ toJson .Profile }}' --path '{{ .ArtifactsIn.cloudObject.KeyValue.backupLocation }}'