apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: rds-blueprint
actions:
  backup:
    type: Deployment
    outputArtifacts:
      snapshot:
        keyValue:
          id: '{{ .Deployment.Name }}-{{ toDate "2006-01-02T15:04:05.999999999Z07:00" .Time  | date "2006-01-02T15-04-05" }}'
          sgid: "{{ .Phases.backupSnapshots.Output.securityGroupID }}"
    configMapNames:
    - dbconfig
    phases:
    - func: KubeTask
      name: backupSnapshots
      args:
        namespace: "{{ .Deployment.Namespace }}"
        image: "kanisterio/postgres-kanister-tools:0.23.0"
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -o
          - nounset
          - -o
          - xtrace
          - -c
          - |
            set +o xtrace
            export AWS_SECRET_ACCESS_KEY="{{ .Profile.Credential.KeyPair.Secret }}"
            export AWS_ACCESS_KEY_ID="{{ .Profile.Credential.KeyPair.ID }}"
            set -o xtrace

            aws rds create-db-snapshot --db-instance-identifier="{{ index .ConfigMaps.dbconfig.Data "postgres.instanceid" }}" --db-snapshot-identifier="{{ .Deployment.Name }}-{{ toDate "2006-01-02T15:04:05.999999999Z07:00" .Time  | date "2006-01-02T15-04-05" }}" --region "{{ .Profile.Location.Region }}"
            aws rds wait db-snapshot-completed --region "{{ .Profile.Location.Region }}" --db-snapshot-identifier="{{ .Deployment.Name }}-{{ toDate "2006-01-02T15:04:05.999999999Z07:00" .Time  | date "2006-01-02T15-04-05" }}" 

            vpcsgid=$(aws rds describe-db-instances --db-instance-identifier="{{ index .ConfigMaps.dbconfig.Data "postgres.instanceid" }}" --region "{{ .Profile.Location.Region }}" --query 'DBInstances[].VpcSecurityGroups[].VpcSecurityGroupId' --output text)
            kando output securityGroupID $vpcsgid
  restore:
    type: Deployment
    inputArtifactNames:
    - snapshot
    phases:
    # Scale down pgapp replicas
    - func: ScaleWorkload
      name: scaleDownReplica
      args:
        namespace: "{{ .Deployment.Namespace }}"
        name: "{{ .Deployment.Name }}"
        kind: Deployment
        replicas: 0

    - func: KubeTask
      name: restoreSnapshots
      args:
        namespace: "{{ .Deployment.Namespace }}"
        image: "kanisterio/postgres-kanister-tools:0.23.0"
        command:
          - bash
          - -o
          - errexit
          - -o
          - nounset
          - -o
          - xtrace
          - -c
          - |
            set +o xtrace
            export AWS_SECRET_ACCESS_KEY="{{ .Profile.Credential.KeyPair.Secret }}"
            export AWS_ACCESS_KEY_ID="{{ .Profile.Credential.KeyPair.ID }}"
            set -o xtrace

            # Delete old db instance
            aws rds delete-db-instance --db-instance-identifier="{{ index .ConfigMaps.dbconfig.Data "postgres.instanceid" }}" --skip-final-snapshot --region "{{ .Profile.Location.Region }}" 2>&1 || echo $

            aws rds wait db-instance-deleted --region "{{ .Profile.Location.Region }}" --db-instance-identifier="{{ index .ConfigMaps.dbconfig.Data "postgres.instanceid" }}"

            # Restore instance from snapshot
            aws rds restore-db-instance-from-db-snapshot --db-instance-identifier="{{ index .ConfigMaps.dbconfig.Data "postgres.instanceid" }}" --db-snapshot-identifier="{{ .ArtifactsIn.snapshot.KeyValue.id }}" --vpc-security-group-ids "{{ .ArtifactsIn.snapshot.KeyValue.sgid }}" --region "{{ .Profile.Location.Region }}"
            aws rds wait db-instance-available --region "{{ .Profile.Location.Region }}" --db-instance-identifier="{{ index .ConfigMaps.dbconfig.Data "postgres.instanceid" }}"

    # Scale up pgapp replica
    - func: ScaleWorkload
      name: scaleUpReplica
      args:
        namespace: "{{ .Deployment.Namespace }}"
        name: "{{ .Deployment.Name }}"
        kind: Deployment
        replicas: 1

  delete:
    type: Deployment
    inputArtifactNames:
    - snapshot
    phases:
    - func: KubeTask
      name: restoreSnapshots
      args:
        namespace: "{{ .Deployment.Namespace }}"
        image: "kanisterio/postgres-kanister-tools:0.23.0"
        command:
          - bash
          - -o
          - errexit
          - -o
          - nounset
          - -o
          - xtrace
          - -c
          - |
            set +o xtrace
            export AWS_SECRET_ACCESS_KEY="{{ .Profile.Credential.KeyPair.Secret }}"
            export AWS_ACCESS_KEY_ID="{{ .Profile.Credential.KeyPair.ID }}"
            set -o xtrace
            aws rds delete-db-snapshot --db-snapshot-identifier="{{ .ArtifactsIn.snapshot.KeyValue.id }}" --region "{{ .Profile.Location.Region }}"
