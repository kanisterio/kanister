apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: mongodb-atlas-blueprint
actions:
  backup:
    outputArtifacts:
      backupOutput:
        keyValue:
          snapshotId: "{{ .Phases.mongoBackup.Output.snapshotId }}"
          publicKey: "{{ .Phases.mongoBackup.Output.publicKey }}"
          privateKey: "{{ .Phases.mongoBackup.Output.privateKey }}"
          orgId: "{{ .Phases.mongoBackup.Output.orgId }}"
          projectId: "{{ .Phases.mongoBackup.Output.projectId }}"
          clusterName: "{{ .Phases.mongoBackup.Output.clusterName }}"
    phases:
    - func: KubeTask
      name: mongoBackup
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<repository>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            orgId='{{ .Object.data.orgid | toString | b64dec }}'
            projectId='{{ .Object.data.projectid | toString | b64dec }}'
            publicKey='{{ .Object.data.publickey | toString | b64dec }}'
            privateKey='{{ .Object.data.privatekey | toString | b64dec }}'
            clusterName='{{ .Object.data.clustername | toString | b64dec }}'
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '${orgId}'
            output = 'json'
            private_api_key = '${privateKey}'
            project_id = '${projectId}'
            public_api_key = '${publicKey}'
            service = 'cloud'
            EOL
            atlas backups snapshots create ${clusterName} --desc "MongoDB Atlas snapshot" -o json > output.json
            snapshotId=$(jq -r ".id" output.json)
            kando output snapshotId ${snapshotId}
            kando output publicKey ${publicKey}
            kando output privateKey ${privateKey}
            kando output orgId ${orgId}
            kando output projectId ${projectId}
            kando output clusterName ${clusterName}

    - func: KubeTask
      name: waitForBackupToComplete
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<repository>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .Phases.mongoBackup.Output.orgId }}'
            output = 'json'
            private_api_key = '{{ .Phases.mongoBackup.Output.privateKey }}'
            project_id = '{{ .Phases.mongoBackup.Output.projectId }}'
            public_api_key = '{{ .Phases.mongoBackup.Output.publicKey }}'
            service = 'cloud'
            EOL
            isCreated=false
            isFailed=false
            counter=0
            while [[ $isCreated != true && $isFailed == false ]];
            do
              atlas backups snapshots describe {{ .Phases.mongoBackup.Output.snapshotId }}\
              --clusterName {{ .Phases.mongoBackup.Output.clusterName }} -o json > output.json
              isCompleted=$(jq -r ".status" output.json)
              if [ $isCompleted == "failed" ]; then
                exit 1
              fi
              if [ $isCompleted == "completed" ]; then
                exit 0
              fi
              sleep 30
              if [[ $counter -ge 40 ]]; then
                echo "Timed out waiting for backup completion."
                exit 1
              fi
              counter=$((counter+1))
            done

  restore:
    inputArtifactNames:
      - backupOutput
    phases:
    - func: KubeTask
      name: mongoRestore
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<repository>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .ArtifactsIn.backupOutput.KeyValue.orgId }}'
            output = 'json'
            private_api_key = '{{ .ArtifactsIn.backupOutput.KeyValue.privateKey }}'
            project_id = '{{ .ArtifactsIn.backupOutput.KeyValue.projectId }}'
            public_api_key = '{{ .ArtifactsIn.backupOutput.KeyValue.publicKey }}'
            service = 'cloud'
            EOL
            snapshot_id={{ .ArtifactsIn.backupOutput.KeyValue.snapshotId }}
            target_cluster_name={{ .ArtifactsIn.backupOutput.KeyValue.clusterName }}
            target_project_id={{ .ArtifactsIn.backupOutput.KeyValue.projectId }}
            atlas backup restore start automated --clusterName {{ .ArtifactsIn.backupOutput.KeyValue.clusterName }} \
            --snapshotId ${snapshot_id} --targetClusterName ${target_cluster_name} \
            --targetProjectId ${target_project_id} -o json > output.json
            restore_id=$(jq -r ".id" output.json)
            kando output restoreId ${restore_id}

    - func: KubeTask
      name: waitForRestoreToComplete
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<repository>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .ArtifactsIn.backupOutput.KeyValue.orgId }}'
            output = 'json'
            private_api_key = '{{ .ArtifactsIn.backupOutput.KeyValue.privateKey }}'
            project_id = '{{ .ArtifactsIn.backupOutput.KeyValue.projectId }}'
            public_api_key = '{{ .ArtifactsIn.backupOutput.KeyValue.publicKey }}'
            service = 'cloud'
            EOL
            isCreated=false
            isFailed=false
            counter=0
            while [[ $isCreated != true && $isFailed == false ]];
            do
              atlas backups restores describe {{ .Phases.mongoRestore.Output.restoreId }}\
              --clusterName {{ .ArtifactsIn.backupOutput.KeyValue.clusterName }} -o json > output.json
              isFinished=$(jq -r ".finishedAt" output.json)
              isRestoreFailed=$(jq -r ".failed" output.json)
              if [ $isRestoreFailed == "true" ]; then
                exit 1
              fi
              if [ $isRestoreFailed == "false" ] && [ $isFinished != "null" ]; then
                exit 0
              fi
              sleep 30
              if [[ $counter -ge 40 ]]; then
                echo "Timed out waiting for restore completion."
                exit 1
              fi
              counter=$((counter+1))
            done

  delete:
    inputArtifactNames:
      - backupOutput
    phases:
    - func: KubeTask
      name: deleteMongoBackup
      args:
        namespace: "{{ .Namespace.Name }}"
        image: <registry>/<repository>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .ArtifactsIn.backupOutput.KeyValue.orgId }}'
            output = 'json'
            private_api_key = '{{ .ArtifactsIn.backupOutput.KeyValue.privateKey }}'
            project_id = '{{ .ArtifactsIn.backupOutput.KeyValue.projectId }}'
            public_api_key = '{{ .ArtifactsIn.backupOutput.KeyValue.publicKey }}'
            service = 'cloud'
            EOL
            atlas backups snapshots delete {{ .ArtifactsIn.backupOutput.KeyValue.snapshotId }} \
            --clusterName {{ .ArtifactsIn.backupOutput.KeyValue.clusterName }} --force
