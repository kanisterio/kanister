apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: mongodb-atlas-blueprint
actions:
  backup:
    outputArtifacts:
      backupOutput:
        keyValue:
          snapshotId: "{{ .Phases.mongoBackup.Output.snapshotId }}"
    phases:
    - func: KubeTask
      name: mongoBackup
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<account_name>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .Object.data.orgid | toString | b64dec }}'
            output = 'json'
            private_api_key = '{{ .Object.data.privatekey | toString | b64dec }}'
            project_id = '{{ .Object.data.projectid | toString | b64dec }}'
            public_api_key = '{{ .Object.data.publickey | toString | b64dec }}'
            service = 'cloud'
            EOL
            cluster_name='{{ .Object.data.clustername | toString | b64dec }}'
            atlas backups snapshots create ${cluster_name} --desc "MongoDB Atlas snapshot" -o json > output.json
            snapshot_id=$(jq -r ".id" output.json)
            kando output snapshotId ${snapshot_id}

    - func: KubeTask
      name: WaitForBackupToComplete
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<account_name>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .Object.data.orgid | toString | b64dec }}'
            output = 'json'
            private_api_key = '{{ .Object.data.privatekey | toString | b64dec }}'
            project_id = '{{ .Object.data.projectid | toString | b64dec }}'
            public_api_key = '{{ .Object.data.publickey | toString | b64dec }}'
            service = 'cloud'
            EOL
            cluster_name='{{ .Object.data.clustername | toString | b64dec }}'
            isCreated=false
            isFailed=false
            while [[ $isCreated != true && $isFailed == false ]];
            do
              atlas backups snapshots describe {{ .Phases.mongoBackup.Output.snapshotId }}\
              --clusterName ${cluster_name} -o json > output.json
              isCompleted=$(jq -r ".status" output.json)
              if [ $isCompleted == "failed" ]; then
                exit 1
              fi
              if [ $isCompleted == "completed" ]; then
                exit 0
              fi
              sleep 30
            done

  restore:
    inputArtifactNames:
      - backupOutput
    outputArtifacts:
      restoreObject:
        keyValue:
          restoreId: "{{ .Phases.mongoRestore.Output.restoreId }}"
    phases:
    - func: KubeTask
      name: mongoRestore
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<account_name>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .Object.data.orgid | toString | b64dec }}'
            output = 'json'
            private_api_key = '{{ .Object.data.privatekey | toString | b64dec }}'
            project_id = '{{ .Object.data.projectid | toString | b64dec }}'
            public_api_key = '{{ .Object.data.publickey | toString | b64dec }}'
            service = 'cloud'
            EOL
            cluster_name='{{ .Object.data.clustername | toString | b64dec }}'
            snapshot_id='{{ .ArtifactsIn.backupOutput.KeyValue.snapshotId }}'
            target_cluster_name=${cluster_name}
            target_project_id='{{ .Object.data.projectid | toString | b64dec }}'
            atlas backup restore start automated --clusterName ${cluster_name} --snapshotId ${snapshot_id} \
            --targetClusterName ${target_cluster_name} --targetProjectId ${target_project_id} -o json > output.json
            restore_id=$(jq -r ".id" output.json)
            kando output restoreId ${restore_id}

    - func: KubeTask
      name: WaitForRestoreToComplete
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<account_name>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .Object.data.orgid | toString | b64dec }}'
            output = 'json'
            private_api_key = '{{ .Object.data.privatekey | toString | b64dec }}'
            project_id = '{{ .Object.data.projectid | toString | b64dec }}'
            public_api_key = '{{ .Object.data.publickey | toString | b64dec }}'
            service = 'cloud'
            EOL
            cluster_name='{{ .Object.data.clustername | toString | b64dec }}'
            isCreated=false
            isFailed=false
            while [[ $isCreated != true && $isFailed == false ]];
            do
              atlas backups restores describe {{ .Phases.mongoRestore.Output.restoreId }}\
              --clusterName ${cluster_name} -o json > output.json
              isFinished=$(jq -r ".finishedAt" output.json)
              isRestoreFailed=$(jq -r ".failed" output.json)
              if [ $isRestoreFailed == "true" ]; then
                exit 1
              fi
              if [ $isRestoreFailed == "false" ] && [ $isFinished != "null" ]; then
                exit 0
              fi
              sleep 30
            done

  delete:
    inputArtifactNames:
      - backupOutput
    phases:
    - func: KubeTask
      name: deleteMongoBackup
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: <registry>/<account_name>/mongodb-atlas:<tag_name>
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            cat >/root/.config/atlascli/config.toml <<EOL
            [default]
            org_id = '{{ .Object.data.orgid | toString | b64dec }}'
            output = 'json'
            private_api_key = '{{ .Object.data.privatekey | toString | b64dec }}'
            project_id = '{{ .Object.data.projectid | toString | b64dec }}'
            public_api_key = '{{ .Object.data.publickey | toString | b64dec }}'
            service = 'cloud'
            EOL
            cluster_name='{{ .Object.data.clustername | toString | b64dec }}'
            atlas backups snapshots delete {{ .ArtifactsIn.backupOutput.KeyValue.snapshotId }} \
            --clusterName ${cluster_name} --force
