apiVersion: v1
kind: Service
metadata:
  name: picture-gallery
  labels:
    app: picture-gallery
spec:
  ports:
    - port: 80
  selector:
    app: picture-gallery
    tier: frontend
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pic-gal-php-cfg
  labels:
    app: picture-gallery
    contains: php-config
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pic-gal-pics
  labels:
    app: picture-gallery
    contains: uploaded-pictures
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pic-gal-mysql
  labels:
    app: picture-gallery
    contains: mysql-dbs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: picture-gallery
  labels:
    app: picture-gallery
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: picture-gallery
  template:
    metadata:
      labels:
        app: picture-gallery
        tier: frontend
    spec:
      containers:
      - image: kastenio/picturegallery:3fbc5be
        livenessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        name: picture-gallery
        ports:
        - containerPort: 80
          name: picture-gallery
        volumeMounts:
        - name: pic-gal-php-cfg
          mountPath: /data
        - name: pic-gal-pic
          mountPath: /uploads
        - name: pic-gal-mysql
          mountPath: /mysql   
      volumes:
      - name: pic-gal-php-cfg
        persistentVolumeClaim:
          claimName: pic-gal-php-cfg
      - name: pic-gal-pic
        persistentVolumeClaim:
          claimName: pic-gal-pics
      - name: pic-gal-mysql
        persistentVolumeClaim:
          claimName: pic-gal-mysql
---
kind: Ingress
apiVersion: networking.k8s.io/v1beta1
#creating ingress for picture-gallery
#is accessible by cluster.domainname/picture-gallery
metadata:
  name: picture-gallery
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
spec:
  rules:
  - http:
      paths:
      - path: /picture-gallery
        backend:
          serviceName: picture-gallery
          servicePort: 80
