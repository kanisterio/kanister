apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: elasticsearch-blueprint
actions:
  backup:
    outputArtifacts:
      esBackup:
        # Capture the kopia snapshot information for subsequent actions
        # The information includes the kopia snapshot ID which is essential for restore and delete to succeed
        # `kopiaOutput` is the name provided to kando using `--output-name` flag
        kopiaSnapshot: "{{ .Phases.backupToStore.Output.kopiaOutput }}"
    phases:
    - func: KubeTask
      name: backupToStore
      objects:
        esMasterCredSecret:
          kind: Secret
          name: "{{ index .Object.metadata.labels.app }}-credentials"
          namespace: "{{ .StatefulSet.Namespace }}"
      args:
        namespace: "{{ .StatefulSet.Namespace }}"
        image: "ghcr.io/kanisterio/es-sidecar:0.107.0"
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          host_name="{{ .Object.spec.serviceName }}.{{ .StatefulSet.Namespace }}.svc.cluster.local"
          backup_file_path='backup.gz'
          master_username="{{ index .Phases.backupToStore.Secrets.esMasterCredSecret.Data "username" | toString }}"
          master_password="{{ index .Phases.backupToStore.Secrets.esMasterCredSecret.Data "password" | toString }}"
          NODE_TLS_REJECT_UNAUTHORIZED=0 elasticdump --bulk=true --input=https://${master_username}:${master_password}@${host_name}:9200 --output=/backup
          gzip -c /backup | kando location push --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --output-name "kopiaOutput" -
  restore:
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `esBackup.KopiaSnapshot`
    - esBackup
    phases:
    - func: KubeTask
      name: restoreFromObjectStore
      objects:
        esMasterCredSecret:
          kind: Secret
          name: "{{ index .Object.metadata.labels.app }}-credentials"
          namespace: "{{ .StatefulSet.Namespace }}"      
      args:
        namespace: "{{ .StatefulSet.Namespace }}"
        image: "ghcr.io/kanisterio/es-sidecar:0.107.0"
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          host_name="{{ .Object.spec.serviceName }}.{{ .StatefulSet.Namespace }}.svc.cluster.local"
          backup_file_path='backup.gz'
          kopia_snap='{{ .ArtifactsIn.esBackup.KopiaSnapshot }}'
          master_username="{{ index .Phases.restoreFromObjectStore.Secrets.esMasterCredSecret.Data "username" | toString }}"
          master_password="{{ index .Phases.restoreFromObjectStore.Secrets.esMasterCredSecret.Data "password" | toString }}"
          kando location pull --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot "${kopia_snap}" - | gunzip -c | NODE_TLS_REJECT_UNAUTHORIZED=0 elasticdump --bulk=true --input=$ --output=https://${master_username}:${master_password}@${host_name}:9200
  delete:
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `esBackup.KopiaSnapshot`
    - esBackup
    phases:
    - func: KubeTask
      name: deleteFromStore
      args:
        namespace: "{{ .Namespace.Name }}"
        image: "ghcr.io/kanisterio/es-sidecar:0.107.0"
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          backup_file_path='backup.gz'
          kopia_snap='{{ .ArtifactsIn.esBackup.KopiaSnapshot }}'
          kando location delete --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot "${kopia_snap}"
