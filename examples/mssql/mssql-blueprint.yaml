apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: mssql-blueprint
actions:
  backup:
    outputArtifacts:
      mssqlCloudDump:
        keyValue:
          s3path: "{{ .Phases.dumpToObjectStore.Output.s3path }}"
    secretNames:
      - mssql
    phases:
      - func: KubeTask
        name: dumpToObjectStore
        args:
          image: ghcr.io/kanisterio/mssql-tools:0.107.0
          command:
            - bash
            - -o
            - errexit
            - -o
            - pipefail
            - -c
            - |
              s3_path="/mssql-backups/{{ index .Deployment.Name }}/{{ toDate "2006-01-02T15:04:05.999999999Z07:00" .Time  | date "2006-01-02T15-04-05" }}/dump.sql.gz"
              root_password="{{ .Secrets.mssql.Data.SA_PASSWORD | toString }}"
              root_uname="sa"
              mssql_pod="{{ index .Deployment.Namespace }}/{{ index .Deployment.Pods 0 }}"
              server_name="{{ index .Deployment.Name }}.{{index .Deployment.Namespace}}.svc.cluster.local"
              databases=$(/opt/mssql-tools/bin/sqlcmd -S ${server_name} -U ${root_uname} -P ${root_password} -Q "SET NOCOUNT ON; SELECT name FROM sys.databases WHERE name NOT IN ('master','model','msdb','tempdb')" -b -s "," -h -1)
              for database in $databases; do /opt/mssql-tools/bin/sqlcmd -S ${server_name} -U ${root_uname} -P ${root_password} -Q "backup database $database to disk = '/tmp/backup/$database.bak' with format;"; done
              kubectl cp ${mssql_pod}:/tmp/backup /tmp/backup
              cd /tmp/
              tar -zcvf backup.tar.gz backup/
              kando location push --profile '{{ toJson .Profile }}' --path ${s3_path} backup.tar.gz
              kubectl exec -it {{ index .Deployment.Pods 0 }} -n {{ index .Deployment.Namespace }} -- rm -r /tmp/backup
              kando output s3path ${s3_path}
  restore:
    inputArtifactNames:
      - mssqlCloudDump
    secretNames:
      - mssql
    phases:
      - func: KubeTask
        name: restoreFromObjectStore
        args:
          image: ghcr.io/kanisterio/mssql-tools:0.107.0
          command:
            - bash
            - -o
            - errexit
            - -o
            - pipefail
            - -c
            - |
              s3_path="{{ .ArtifactsIn.mssqlCloudDump.KeyValue.s3path }}"
              root_password="{{ .Secrets.mssql.Data.SA_PASSWORD | toString }}"
              root_uname="sa"
              mssql_pod="{{ index .Deployment.Namespace }}/{{ index .Deployment.Pods 0 }}"
              server_name="{{ index .Deployment.Name }}.{{index .Deployment.Namespace}}.svc.cluster.local"
              kando location pull --profile '{{ toJson .Profile }}' --path ${s3_path} - | tar zxvf - -C /tmp/
              kubectl cp /tmp/backup ${mssql_pod}:/tmp/backup
              backup_files=$(ls /tmp/backup)
              for script in $backup_files; do database="$(cut -d'.' -f1 <<<"$script")"; /opt/mssql-tools/bin/sqlcmd -S ${server_name} -U ${root_uname} -P ${root_password} -Q "restore database $database from disk = '/tmp/backup/$script' with replace"; done
              kubectl exec -it {{ index .Deployment.Pods 0 }} -n {{ index .Deployment.Namespace }} -- rm -r /tmp/backup
  delete:
    inputArtifactNames:
      - mssqlCloudDump
    phases:
      - func: KubeTask
        name: deleteFromBlobStore
        args:
          image: ghcr.io/kanisterio/mssql-tools:0.107.0
          command:
            - bash
            - -o
            - errexit
            - -o
            - pipefail
            - -c
            - |
              s3_path="{{ .ArtifactsIn.mssqlCloudDump.KeyValue.s3path }}"
              kando location delete --profile '{{ toJson .Profile }}' --path ${s3_path}
