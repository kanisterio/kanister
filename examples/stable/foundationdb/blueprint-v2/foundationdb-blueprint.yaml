apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: foundationdb-blueprint
actions:
  backup:
    kind: CustomResource
    outputArtifacts:
      fdbBackup:
        keyValue:
          backupPath: "{{ .Phases.TakeBackup.Output.backupPath }}"
          backupID: "{{ .Phases.TakeBackup.Output.backupID }}"
    phases:
    - func: KubeExec
      name: TakeBackup
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        pod: "{{ .Object.metadata.name }}-2"
        container: foundationdb
        command:
          - bash
          - -o
          - pipefail
          - -o
          - errexit
          - -c
          - |
            #we are manually starting backup_aegnt here because fdb operator doesnt  have support for
            # backup and restore right now. But they are planning to have it, going further.
            # Once they have the support for backup and restore we will change this to accommodate upstream changes
            /usr/bin/backup_agent -C /var/dynamic-conf/fdb.cluster  &
            mkdir -p /data/fdbbackup
            chmod -R 777 /data/fdbbackup
            fdbbackup start  -d file:///data/fdbbackup -w
            pkill -9 backup_agent
            backup_path='/foundationdb-backups/{{ toDate "2006-01-02T15:04:05.999999999Z07:00" .Time  | date "2006-01-02T15-04-05" }}/backup.tgz'
            tar zcvf - -C /data/ fdbbackup | kando location push --profile '{{ toJson .Profile }}' --path ${backup_path} -
            rm -rf /data/fdbbackup
            kando output backupPath ${backup_path}
  restore:
    kind: CustomResource
    inputArtifactNames:
    - fdbBackup
    phases:
    - func: KubeExec
      name: restoreBackup
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        pod: "{{ .Object.metadata.name }}-2"
        container: foundationdb
        command:
          - bash
          - -o
          - pipefail
          - -o
          - errexit
          - -c
          - |
            mkdir -p /data/restored
            backup_path='{{ .ArtifactsIn.fdbBackup.KeyValue.backupPath }}'
            backup_id='{{ .ArtifactsIn.fdbBackup.KeyValue.backupID }}'
            kando location pull --profile '{{ toJson .Profile }}' --path ${backup_path} --backupID ${backup_id} - | tar zxvf - -C /data/restored
            /usr/bin/backup_agent -C /var/dynamic-conf/fdb.cluster  &
            fdbcli --exec "writemode on; clearrange '' \xFF"
            backupname=$(ls /data/restored/fdbbackup/)
            fdbrestore start --dest_cluster_file /var/dynamic-conf/fdb.cluster -r file:///data/restored/fdbbackup/$backupname -w
            pkill -9 backup_agent
  delete:
    type: Namespace
    inputArtifactNames:
    - fdbBackup
    phases:
    - func: KubeTask
      name: deleteBackup
      args:
        namespace: "{{ .Namespace.Name }}"
        image: ghcr.io/kanisterio/kanister-tools:0.53.0
        command:
          - bash
          - -o
          - pipefail
          - -o
          - errexit
          - -c
          - |
            backup_path='{{ .ArtifactsIn.fdbBackup.KeyValue.backupPath }}'
            backup_id='{{ .ArtifactsIn.fdbBackup.KeyValue.backupID }}'
            kando location delete --profile '{{ toJson .Profile }}' --path ${backup_path} --backupID ${backup_id}
