apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: time-log-bp
  namespace: kanister
actions:
  backup:
    type: Deployment
    outputArtifacts:
      timeLog:
        keyValue:
          path: '{{ .Profile.Location.S3Compliant.Bucket }}/time-log'
      backupIdentifier:
        keyValue:
          id: '{{ toDate "2006-01-02T15:04:05.999999999Z07:00" .Time | date "2006-01-02" }}'
    phases:
    - func: BackupData
      name: backupToS3
      args:
        namespace: "{{ .Deployment.Namespace }}"
        pod: "{{ index .Deployment.Pods 0 }}"
        container: test-container
        includePath: /var/log
        backupArtifactPrefix: "{{ .ArtifactsOut.timeLog.KeyValue.path }}"
        backupIdentifier: "{{ .ArtifactsOut.backupIdentifier.KeyValue.id }}"
  restore:
    type: Deployment
    inputArtifactNames:
    - timeLog
    - backupIdentifier
    phases:
    - func: ScaleWorkload
      name: shutdownPod
      args:
        namespace: "{{ .Deployment.Namespace }}"
        name: "{{ .Deployment.Name }}"
        kind: Deployment
        replicas: 0
    - func: RestoreData
      name: restoreFromS3
      args:
        namespace: "{{ .Deployment.Namespace }}"
        pod: "{{ index .Deployment.Pods 0 }}"
        image: kanisterio/kanister-tools:0.11.0
        backupArtifactPrefix: "{{ .ArtifactsIn.timeLog.KeyValue.path }}"
        backupIdentifier: "{{ .ArtifactsIn.backupIdentifier.KeyValue.id }}"
    - func: ScaleWorkload
      name: bringupPod
      args:
        namespace: "{{ .Deployment.Namespace }}"
        name: "{{ .Deployment.Name }}"
        kind: Deployment
        replicas: 1
  delete:
    type: Deployment
    inputArtifactNames:
    - timeLog
    phases:
    - func: DeleteData
      name: deleteFromS3
      args:
        namespace: "{{ .Deployment.Namespace }}"
        artifact: "{{ .ArtifactsIn.timeLog.KeyValue.path }}"
