apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: couchbase-blueprint
actions:
  backup:
    kind: CustomResource
    outputArtifacts:
      cbBackup:
        # Capture the kopia snapshot information for subsequent actions
        # The information includes the kopia snapshot ID which is essential for restore and delete to succeed
        # `kopiaOutput` is the name provided to kando using `--output-name` flag
        kopiaSnapshot: "{{ .Phases.TakeBackup.Output.kopiaOutput }}"
    phases:
    - func: KubeTask
      name: TakeBackup
      objects:
        authSecret:
          kind: Secret
          name: "{{ .Object.spec.security.adminSecret }}"
          namespace: "{{ .Object.metadata.namespace }}"
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: ghcr.io/kanisterio/couchbase-tools:0.107.0
        command:
          - bash
          - -o
          - pipefail
          - -o
          - errexit
          - -c
          - |
            rm -rf /backups/test
            mkdir -p /backups/test
            cbbackupmgr config --archive /backups/test --repo couchbase
            cbbackupmgr backup                                              \
              --archive /backups/test                                       \
              --repo couchbase                                              \
              --cluster couchbase://{{ .Object.metadata.name }}.{{ .Object.metadata.namespace }}.svc    \
              --username {{ .Phases.TakeBackup.Secrets.authSecret.Data.username | toString }} \
              --password {{ .Phases.TakeBackup.Secrets.authSecret.Data.password | toString }}
            backup_file_path='backup.tgz'
            tar zcvf - -C /backups/ test | kando location push --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --output-name "kopiaOutput" -

  restore:
    kind: CustomResource
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `cbBackup.KopiaSnapshot`
    - cbBackup
    phases:
    - func: KubeTask
      name: restoreBackup
      objects:
        authSecret:
          kind: Secret
          name: "{{ .Object.spec.security.adminSecret }}"
          namespace: "{{ .Object.metadata.namespace }}"
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: ghcr.io/kanisterio/couchbase-tools:0.107.0
        command:
          - bash
          - -o
          - pipefail
          - -o
          - errexit
          - -c
          - |
            rm -rf /backups/test
            mkdir -p /backups/test
            backup_file_path='backup.tgz'
            kando location pull --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot '{{ .ArtifactsIn.cbBackup.KopiaSnapshot }}' - | tar zxvf - -C /backups/
            cbbackupmgr restore                                             \
              --archive /backups/test                                       \
              --repo couchbase                                              \
              --cluster couchbase://{{ .Object.metadata.name }}.{{ .Object.metadata.namespace }}.svc    \
              --username {{ .Phases.restoreBackup.Secrets.authSecret.Data.username | toString }} \
              --password {{ .Phases.restoreBackup.Secrets.authSecret.Data.password | toString }} \
              --force-updates

  delete:
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `cbBackup.KopiaSnapshot`
    - cbBackup
    phases:
    - func: KubeTask
      name: deleteBackup
      args:
        namespace: "{{ .Namespace.Name }}"
        image: ghcr.io/kanisterio/couchbase-tools:0.107.0
        command:
          - bash
          - -o
          - pipefail
          - -o
          - errexit
          - -c
          - |
            backup_file_path='backup.tgz'
            kando location delete --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot '{{ .ArtifactsIn.cbBackup.KopiaSnapshot }}'
