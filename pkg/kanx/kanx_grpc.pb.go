// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/kanx/kanx.proto

package kanx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessServiceClient is the client API for ProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessServiceClient interface {
	CreateProcesses(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*Process, error)
	ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (ProcessService_ListProcessesClient, error)
	Stdout(ctx context.Context, in *ProcessOutputRequest, opts ...grpc.CallOption) (ProcessService_StdoutClient, error)
	Stderr(ctx context.Context, in *ProcessOutputRequest, opts ...grpc.CallOption) (ProcessService_StderrClient, error)
}

type processServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessServiceClient(cc grpc.ClientConnInterface) ProcessServiceClient {
	return &processServiceClient{cc}
}

func (c *processServiceClient) CreateProcesses(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/kanx.ProcessService/CreateProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (ProcessService_ListProcessesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessService_ServiceDesc.Streams[0], "/kanx.ProcessService/ListProcesses", opts...)
	if err != nil {
		return nil, err
	}
	x := &processServiceListProcessesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessService_ListProcessesClient interface {
	Recv() (*Process, error)
	grpc.ClientStream
}

type processServiceListProcessesClient struct {
	grpc.ClientStream
}

func (x *processServiceListProcessesClient) Recv() (*Process, error) {
	m := new(Process)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processServiceClient) Stdout(ctx context.Context, in *ProcessOutputRequest, opts ...grpc.CallOption) (ProcessService_StdoutClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessService_ServiceDesc.Streams[1], "/kanx.ProcessService/Stdout", opts...)
	if err != nil {
		return nil, err
	}
	x := &processServiceStdoutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessService_StdoutClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type processServiceStdoutClient struct {
	grpc.ClientStream
}

func (x *processServiceStdoutClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processServiceClient) Stderr(ctx context.Context, in *ProcessOutputRequest, opts ...grpc.CallOption) (ProcessService_StderrClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessService_ServiceDesc.Streams[2], "/kanx.ProcessService/Stderr", opts...)
	if err != nil {
		return nil, err
	}
	x := &processServiceStderrClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessService_StderrClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type processServiceStderrClient struct {
	grpc.ClientStream
}

func (x *processServiceStderrClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessServiceServer is the server API for ProcessService service.
// All implementations must embed UnimplementedProcessServiceServer
// for forward compatibility
type ProcessServiceServer interface {
	CreateProcesses(context.Context, *CreateProcessRequest) (*Process, error)
	ListProcesses(*ListProcessesRequest, ProcessService_ListProcessesServer) error
	Stdout(*ProcessOutputRequest, ProcessService_StdoutServer) error
	Stderr(*ProcessOutputRequest, ProcessService_StderrServer) error
	mustEmbedUnimplementedProcessServiceServer()
}

// UnimplementedProcessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcessServiceServer struct {
}

func (UnimplementedProcessServiceServer) CreateProcesses(context.Context, *CreateProcessRequest) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcesses not implemented")
}
func (UnimplementedProcessServiceServer) ListProcesses(*ListProcessesRequest, ProcessService_ListProcessesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProcesses not implemented")
}
func (UnimplementedProcessServiceServer) Stdout(*ProcessOutputRequest, ProcessService_StdoutServer) error {
	return status.Errorf(codes.Unimplemented, "method Stdout not implemented")
}
func (UnimplementedProcessServiceServer) Stderr(*ProcessOutputRequest, ProcessService_StderrServer) error {
	return status.Errorf(codes.Unimplemented, "method Stderr not implemented")
}
func (UnimplementedProcessServiceServer) mustEmbedUnimplementedProcessServiceServer() {}

// UnsafeProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServiceServer will
// result in compilation errors.
type UnsafeProcessServiceServer interface {
	mustEmbedUnimplementedProcessServiceServer()
}

func RegisterProcessServiceServer(s grpc.ServiceRegistrar, srv ProcessServiceServer) {
	s.RegisterService(&ProcessService_ServiceDesc, srv)
}

func _ProcessService_CreateProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).CreateProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanx.ProcessService/CreateProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).CreateProcesses(ctx, req.(*CreateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_ListProcesses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProcessesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServiceServer).ListProcesses(m, &processServiceListProcessesServer{stream})
}

type ProcessService_ListProcessesServer interface {
	Send(*Process) error
	grpc.ServerStream
}

type processServiceListProcessesServer struct {
	grpc.ServerStream
}

func (x *processServiceListProcessesServer) Send(m *Process) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessService_Stdout_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServiceServer).Stdout(m, &processServiceStdoutServer{stream})
}

type ProcessService_StdoutServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type processServiceStdoutServer struct {
	grpc.ServerStream
}

func (x *processServiceStdoutServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessService_Stderr_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServiceServer).Stderr(m, &processServiceStderrServer{stream})
}

type ProcessService_StderrServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type processServiceStderrServer struct {
	grpc.ServerStream
}

func (x *processServiceStderrServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

// ProcessService_ServiceDesc is the grpc.ServiceDesc for ProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kanx.ProcessService",
	HandlerType: (*ProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProcesses",
			Handler:    _ProcessService_CreateProcesses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListProcesses",
			Handler:       _ProcessService_ListProcesses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stdout",
			Handler:       _ProcessService_Stdout_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stderr",
			Handler:       _ProcessService_Stderr_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/kanx/kanx.proto",
}
