/*
Copyright 2024 The Kanister Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ActionStatusApplyConfiguration represents an declarative configuration of the ActionStatus type for use
// with apply.
type ActionStatusApplyConfiguration struct {
	Name       *string                               `json:"name,omitempty"`
	Object     *ObjectReferenceApplyConfiguration    `json:"object,omitempty"`
	Blueprint  *string                               `json:"blueprint,omitempty"`
	Phases     []PhaseApplyConfiguration             `json:"phases,omitempty"`
	Artifacts  map[string]ArtifactApplyConfiguration `json:"artifacts,omitempty"`
	DeferPhase *PhaseApplyConfiguration              `json:"deferPhase,omitempty"`
}

// ActionStatusApplyConfiguration constructs an declarative configuration of the ActionStatus type for use with
// apply.
func ActionStatus() *ActionStatusApplyConfiguration {
	return &ActionStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ActionStatusApplyConfiguration) WithName(value string) *ActionStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithObject sets the Object field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Object field is set to the value of the last call.
func (b *ActionStatusApplyConfiguration) WithObject(value *ObjectReferenceApplyConfiguration) *ActionStatusApplyConfiguration {
	b.Object = value
	return b
}

// WithBlueprint sets the Blueprint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Blueprint field is set to the value of the last call.
func (b *ActionStatusApplyConfiguration) WithBlueprint(value string) *ActionStatusApplyConfiguration {
	b.Blueprint = &value
	return b
}

// WithPhases adds the given value to the Phases field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Phases field.
func (b *ActionStatusApplyConfiguration) WithPhases(values ...*PhaseApplyConfiguration) *ActionStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPhases")
		}
		b.Phases = append(b.Phases, *values[i])
	}
	return b
}

// WithArtifacts puts the entries into the Artifacts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Artifacts field,
// overwriting an existing map entries in Artifacts field with the same key.
func (b *ActionStatusApplyConfiguration) WithArtifacts(entries map[string]ArtifactApplyConfiguration) *ActionStatusApplyConfiguration {
	if b.Artifacts == nil && len(entries) > 0 {
		b.Artifacts = make(map[string]ArtifactApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Artifacts[k] = v
	}
	return b
}

// WithDeferPhase sets the DeferPhase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeferPhase field is set to the value of the last call.
func (b *ActionStatusApplyConfiguration) WithDeferPhase(value *PhaseApplyConfiguration) *ActionStatusApplyConfiguration {
	b.DeferPhase = value
	return b
}
