/*
Copyright 2024 The Kanister Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ActionProgressApplyConfiguration represents an declarative configuration of the ActionProgress type for use
// with apply.
type ActionProgressApplyConfiguration struct {
	RunningPhase           *string  `json:"runningPhase,omitempty"`
	PercentCompleted       *string  `json:"percentCompleted,omitempty"`
	SizeDownloadedB        *int64   `json:"sizeDownloadedB,omitempty"`
	SizeUploadedB          *int64   `json:"sizeUploadedB,omitempty"`
	EstimatedDownloadSizeB *int64   `json:"estimatedDownloadSizeB,omitempty"`
	EstimatedUploadSizeB   *int64   `json:"estimatedUploadSizeB,omitempty"`
	LastTransitionTime     *v1.Time `json:"lastTransitionTime,omitempty"`
}

// ActionProgressApplyConfiguration constructs an declarative configuration of the ActionProgress type for use with
// apply.
func ActionProgress() *ActionProgressApplyConfiguration {
	return &ActionProgressApplyConfiguration{}
}

// WithRunningPhase sets the RunningPhase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RunningPhase field is set to the value of the last call.
func (b *ActionProgressApplyConfiguration) WithRunningPhase(value string) *ActionProgressApplyConfiguration {
	b.RunningPhase = &value
	return b
}

// WithPercentCompleted sets the PercentCompleted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PercentCompleted field is set to the value of the last call.
func (b *ActionProgressApplyConfiguration) WithPercentCompleted(value string) *ActionProgressApplyConfiguration {
	b.PercentCompleted = &value
	return b
}

// WithSizeDownloadedB sets the SizeDownloadedB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SizeDownloadedB field is set to the value of the last call.
func (b *ActionProgressApplyConfiguration) WithSizeDownloadedB(value int64) *ActionProgressApplyConfiguration {
	b.SizeDownloadedB = &value
	return b
}

// WithSizeUploadedB sets the SizeUploadedB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SizeUploadedB field is set to the value of the last call.
func (b *ActionProgressApplyConfiguration) WithSizeUploadedB(value int64) *ActionProgressApplyConfiguration {
	b.SizeUploadedB = &value
	return b
}

// WithEstimatedDownloadSizeB sets the EstimatedDownloadSizeB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EstimatedDownloadSizeB field is set to the value of the last call.
func (b *ActionProgressApplyConfiguration) WithEstimatedDownloadSizeB(value int64) *ActionProgressApplyConfiguration {
	b.EstimatedDownloadSizeB = &value
	return b
}

// WithEstimatedUploadSizeB sets the EstimatedUploadSizeB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EstimatedUploadSizeB field is set to the value of the last call.
func (b *ActionProgressApplyConfiguration) WithEstimatedUploadSizeB(value int64) *ActionProgressApplyConfiguration {
	b.EstimatedUploadSizeB = &value
	return b
}

// WithLastTransitionTime sets the LastTransitionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTransitionTime field is set to the value of the last call.
func (b *ActionProgressApplyConfiguration) WithLastTransitionTime(value v1.Time) *ActionProgressApplyConfiguration {
	b.LastTransitionTime = &value
	return b
}
