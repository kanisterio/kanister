/*
Copyright 2024 The Kanister Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// RepositoryApplyConfiguration represents an declarative configuration of the Repository type for use
// with apply.
type RepositoryApplyConfiguration struct {
	RootPath          *string                              `json:"rootPath,omitempty"`
	Username          *string                              `json:"username,omitempty"`
	Hostname          *string                              `json:"hostname,omitempty"`
	PasswordSecretRef *v1.SecretReference                  `json:"passwordSecretRef,omitempty"`
	CacheSizeSettings *CacheSizeSettingsApplyConfiguration `json:"cacheSizeSettings,omitempty"`
	Configuration     *ConfigurationApplyConfiguration     `json:"configuration,omitempty"`
}

// RepositoryApplyConfiguration constructs an declarative configuration of the Repository type for use with
// apply.
func Repository() *RepositoryApplyConfiguration {
	return &RepositoryApplyConfiguration{}
}

// WithRootPath sets the RootPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RootPath field is set to the value of the last call.
func (b *RepositoryApplyConfiguration) WithRootPath(value string) *RepositoryApplyConfiguration {
	b.RootPath = &value
	return b
}

// WithUsername sets the Username field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Username field is set to the value of the last call.
func (b *RepositoryApplyConfiguration) WithUsername(value string) *RepositoryApplyConfiguration {
	b.Username = &value
	return b
}

// WithHostname sets the Hostname field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hostname field is set to the value of the last call.
func (b *RepositoryApplyConfiguration) WithHostname(value string) *RepositoryApplyConfiguration {
	b.Hostname = &value
	return b
}

// WithPasswordSecretRef sets the PasswordSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PasswordSecretRef field is set to the value of the last call.
func (b *RepositoryApplyConfiguration) WithPasswordSecretRef(value v1.SecretReference) *RepositoryApplyConfiguration {
	b.PasswordSecretRef = &value
	return b
}

// WithCacheSizeSettings sets the CacheSizeSettings field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheSizeSettings field is set to the value of the last call.
func (b *RepositoryApplyConfiguration) WithCacheSizeSettings(value *CacheSizeSettingsApplyConfiguration) *RepositoryApplyConfiguration {
	b.CacheSizeSettings = value
	return b
}

// WithConfiguration sets the Configuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Configuration field is set to the value of the last call.
func (b *RepositoryApplyConfiguration) WithConfiguration(value *ConfigurationApplyConfiguration) *RepositoryApplyConfiguration {
	b.Configuration = value
	return b
}
