apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: csi-snapshot-bp
actions:
  backup:
    outputArtifacts:
      snapshotInfo:
        keyValue:
          name: "{{ .Phases.createCSISnapshot.Output.name }}"
          pvc: "{{ .Phases.createCSISnapshot.Output.pvc }}"
          namespace: "{{ .Phases.createCSISnapshot.Output.namespace }}"
          restoreSize: "{{ .Phases.createCSISnapshot.Output.restoreSize }}"
          snapshotContent: "{{ .Phases.createCSISnapshot.Output.snapshotContent }}"
    phases:
    - func: CreateCSISnapshot
      name: createCSISnapshot
      args:
        pvc: "{{ (index .Object.spec.template.spec.volumes 0).persistentVolumeClaim.claimName }}"
        namespace: "{{ .Object.metadata.namespace }}"
        snapshotClass: csi-hostpath-snapclass
  restore:
    inputArtifactNames:
    - snapshotInfo
    phases:
    - func: ScaleWorkload
      name: scaleDownSS
      args:
        name: "{{ .Deployment.Name }}"
        namespace: "{{ .Deployment.Namespace }}"
        kind: deployment
        replicas: 0
    - func: KubeOps
      name: deleteOriginalPVC
      args:
        operation: delete
        namespace: "{{ .ArtifactsIn.snapshotInfo.KeyValue.namespace }}"
        objectReference:
          apiVersion: v1
          group: ""
          resource: persistentvolumeclaims
          name: "{{ .ArtifactsIn.snapshotInfo.KeyValue.pvc }}"
          namespace: "{{ .ArtifactsIn.snapshotInfo.KeyValue.namespace }}"
    - func: RestoreCSISnapshot
      name: restorePVCFromSnapshot
      args:
        name: "{{ .ArtifactsIn.snapshotInfo.KeyValue.name }}"
        pvc: "{{ .ArtifactsIn.snapshotInfo.KeyValue.pvc }}"
        namespace: "{{ .ArtifactsIn.snapshotInfo.KeyValue.namespace }}"
        storageClass: csi-hostpath-sc
        restoreSize: "{{ .ArtifactsIn.snapshotInfo.KeyValue.restoreSize }}"
        accessModes: ["ReadWriteOnce"]
        volumeMode: "Filesystem"
    - func: ScaleWorkload
      name: scaleUpSS
      args:
        name: "{{ .Deployment.Name }}"
        namespace: "{{ .Deployment.Namespace }}"
        kind: deployment
        replicas: 1
  delete:
    inputArtifactNames:
    - snapshotInfo
    phases:
    - func: DeleteCSISnapshot
      name: deleteCSISnapshot
      args:
        name: "{{ .ArtifactsIn.snapshotInfo.KeyValue.name }}"
        namespace: "{{ .ArtifactsIn.snapshotInfo.KeyValue.namespace }}"
